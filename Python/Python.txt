											PYTHON
										   ---------------

https://docs.python.org/2.5/lib/contents.html

* python interpreter - line by line execution
* netflix, spotify.
* IDE  - Integerated Development Environment
* source code - code written in a file
* to execute this code, we need a processor which is a electronic chip that has transistors, capactirs in it.
* it understands only in 0 (or) 1, off (or) on.
* for programmers easy, high level languages like python introduced.
* while giving run - > python interpreter connverts over high level code into machine understandable code and send it to processor.
* in-built function -> already written function like print
* variable - to store information
* single line cooment -> #, multi line comments -> ''' hi '''
* name.upper() -> here, using . is to invoke a method
* order of execution :
	-> paranthesis
	-> exponensation
	-> dvision
	-> multiplication
	-> addition
	-> subtraction



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
METHODS :
---------

-> STRING METHODS :
	
	* in -> returns a boolean as the value is present in the string or not
	* len() -> length of the string
	* replace() -> Returns a string where a value is replaced with a specified value
	* capitalize() -> coonverts first character to uppercase
	* casefold() -> Converts string into lower case
	* center() -> Returns a centered string
	* count() -> Returns the number of times a specified value occurs in a string
	* encode() -> Returns an encoded version of the string
	* startswith() -> Returns true if the string starts with the specified value
	* endswith() -> Returns true if the string ends with the specified value
	* expandtabs() -> Sets the tab size of the string
	* find() -> Searches the string and returns the position of where it was found
	* rfind()
	* format() -> Formats specified values in a string
	* format_map() -> Formats specified values in a string
	* index() -> Searches the string and returns the position of where it was found
	* rindex()
	* isalnum() -> Returns True if all characters in the string are alphanumeric
	* isindentifier -> Returns True if the string is an identifier
	* isspace() -> Returns True if all characters in the string are whitespaces
	* isnumeric(), isalpha(), isascii(), isdecimal(), isdigit(), islower(), isupper()
	* join() -> Converts the elements of an iterable into a string
	* ljust() -> Returns a left justified version of the string
	* rjust() -> Returns a right justified version of the string
	* lstrip() -> Returns a left trim version of the string
	* partition() -> Returns a tuple where the string is parted into three parts
	* rpartition()
	* split() -> Splits the string at the specified separator, and returns a list
	* rsplit()
	* swapcase() -> Swaps cases, lower case becomes upper case and vice versa
	* zfill() -> Fills the string with a specified number of 0 values at the beginning

-> MATH METHODS :
	* round() -> round to nearest value
	* abs() -> converts number to positive
	* ceil() -> converts to next higher number
	* floor() -> converts to lowest number
	* comb(n,k) -> number of ways to choose k from n
	* fabs(n) -> returns factorial of n


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


STRING :
--------
* declaredminside double quotes
* string[index] -> print the element tof the index
* string[-1] -> print elements from last index
* string[0:3] -> starting from index 0 to index 3, index 3 is excluded
* string[1:] -> from start to full
* strinng[:4] -> from start to 4
* string[:] -> here, it will include 0 as first index

* FORMATTED STRINGS :
	* syntax -> f'{first} [{last}] is a coder'
	* for shorter syntax than string concatenation
	* like template literals in c++

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

LISTS :
-------
* declared in square bracket
* list.append() -> add an element at last
* list.insert(index, elemennt) -> insert the given element in the given index
* list.pop() -> pop the last element from the list
* list.remove(element) -> removes an element
* list.clear() -> removes all element from the list
* list.index(element) -> returns theindex of the element

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

TUPLES :
--------
* does not support item assignment(immutable)-> we can reassin a vaalue to the tuple object.
* declared in paranthesis.
* numbers = (1,2,3)
  numbers[0] = 10
  print(numbers[0])
	 |
  this is not applicable

UNPACKING : 
* assigning values for ach variables automatically from the tuple
* unpacking tuples into differenct variables
* x,y,z = cordinates(1,2,3)
* can be used to do through ists also

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DICTIONARIES :
--------------
* we can store bunch of key value pairs
* decalred inide curly braces
* key should not be repeated
* accessing them by using the dicttionary name followed by square bracket

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCTIONS :
-----------
* def -> keyword called define where the interpreter knows that we are declaring a function
* syntax -> def fnname():
* fn call should be done only after defining it.
* by defult all functions in pytjon return none
* result can be done by using return statement

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXCEPTIONS :
------------
*  instead of making program crash , make the code to print the proper error message
* try except is used to handle errors
* code in try and if error catch in exception and content inside exveption prints.
* 
