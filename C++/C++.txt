BASICS : 
-------- 

1. # - preprocessor(includes different files into the source code).
2. #include<bits/stdc++.h> - include contents of header file into the code.
3. using namespace std - used for including all names like variables, functions, etc.. into the code without using std:: in the pefix.
4. c vs c++ - oops, in-built functions, flexible, memory management easy.
5. macros - #define, text replacement, code simplification, defined in the header itself and use main thing alone in code.

OOPS :
-------

1. oops - is a powerful paradigm for simplifying code complexity, for reusable code
2. Class - blueprint for creating objects, has functions, attributes and access specifiers.
3. Object - instance of a class, where created to access the class. for car - color, model, year, brake, start are objects.
4. Encapsulation - bUndling of differnet datas into single block like class contains attributes, objects, methods. EX : CAPSULE,SMARTPHONE
5. Abstraction - hides unecessary parts  and provide only the required thing (hiding how data stored and giving output only) EX : ATM,VEHICLES

      i) abstract class - cannot be used by its own but serves as blueprint for other classes. Has minimum 1 pure virtual function in it. those functions can be overriden by the derived   	classes.has virtal void function()=0;
      ii) virtual functions - are member functions that are declared in base class that can be overridden in derived classes. uses virtual keyword.

6. Polymorphism - existing in many forms. person with differnet characteristics, action depends upon the type of data used. EX:WATER-HEAT-VAPOUR,COOL-ICE,MELT-WATER.

    A.) Compile time polymorphism - static poly, solved at compile time. wrong intialisation like string s = 5;

	i) function overloading : within a class, functions name are same with differnet arguments passed.
	ii) function overriding : same function name in derived class and base class.

    B.) Runtime polymorphism - dynamic polymorphism. solved at runtime after compilation , like array out of scope int arr[4] and using arr[5].
	
	i) abstract class.
	ii) virtual functions.

7. Function Templates - can be sued for function overoading, to avoid writing more code. template <Class T>
8. Inheritance - deriving properties and characteristics from one class to another class. EX:HUMAN,VEHICLES
9. Access specifiers - a keyword that controls visibility and accessibility of class members.
	
	i) public - accessed anywhere.
	ii) private - accessed only within the class and not even in the derived class
	iii) protected - acessed only within the class and derived class.

10. Constructor - special member of a class that is invoked when an object is created, same name as class.can be overloaded
11. Destructor - special member of a class that invoked when an object is deleted, for memory allocation. uses tilde(~) symbol, cannot be overloaded and no parameters.
12. Pass by value - passing the actual value of a data , it cannot be altered.
13. Pass by refernce - passing the address of the value, where the main value can be altered.
14. Dangling pointer - pointing to a locaation that nerver exist.
15. Member intializer - intializing the member from one to another
16. Friend funtion - not a member of the class but has access to its private and protected members.
17. This pointer - pointer to the current object
18. Copy constructor - initalising new object as copy of exisiting object.
19. Exceptional Handling - handling the errors that occurs during the execution of the program, includes throw,try,catch
20. Keywords in c++ -if,else,do,while,break,continue,goto,try,catch,char,int,bool.



	

